var CrumbTrailManager = require('./CrumbTrailManager');
var HistoryAction = require('./history/HistoryAction');
var NavigationData = require('./NavigationData');
var ReturnDataManager = require('./ReturnDataManager');
var settings = require('./settings');
var StateContext = require('./StateContext');
var StateInfoConfig = require('./config/StateInfoConfig');
var StateController = (function () {
    function StateController() {
    }
    StateController.setStateContext = function (state, url) {
        try {
            this.setOldStateContext();
            StateContext.state = state;
            StateContext.url = url;
            StateContext.dialog = state.parent;
            StateContext.title = state.title;
            var queryStringData = {};
            var data = state.stateHandler.getNavigationData(state, url, queryStringData);
            StateContext.data = this.parseData(data, state, queryStringData);
            StateContext.previousState = null;
            StateContext.previousDialog = null;
            StateContext.previousData = {};
            CrumbTrailManager.crumbTrail = settings.crumbTrailPersister.load(data[settings.crumbTrailKey]);
            var uncombined = !!data[settings.previousStateIdKey];
            this.setPreviousStateContext(uncombined, data);
            CrumbTrailManager.buildCrumbTrail(uncombined);
            this.crumbs = CrumbTrailManager.getCrumbs(true, settings.combineCrumbTrail);
        }
        catch (e) {
            throw new Error('The Url is invalid\n' + e.message);
        }
    };
    StateController.clearStateContext = function () {
        StateContext.oldState = null;
        StateContext.oldDialog = null;
        StateContext.oldData = {};
        StateContext.previousState = null;
        StateContext.previousDialog = null;
        StateContext.previousData = {};
        StateContext.state = null;
        StateContext.dialog = null;
        StateContext.data = {};
        StateContext.url = null;
        StateContext.title = null;
        CrumbTrailManager.crumbTrail = null;
        CrumbTrailManager.crumbTrailKey = null;
    };
    StateController.setOldStateContext = function () {
        if (StateContext.state) {
            StateContext.oldState = StateContext.state;
            StateContext.oldDialog = StateContext.dialog;
            StateContext.oldData = NavigationData.clone(StateContext.data);
            NavigationData.setDefaults(StateContext.oldData, StateContext.oldState.defaults);
        }
    };
    StateController.setPreviousStateContext = function (uncombined, data) {
        if (uncombined) {
            StateContext.previousState = CrumbTrailManager.getState(data[settings.previousStateIdKey]);
            if (StateContext.previousState)
                StateContext.previousDialog = StateContext.previousState.parent;
            if (data[settings.returnDataKey])
                StateContext.previousData = ReturnDataManager.parseReturnData(data[settings.returnDataKey], StateContext.previousState);
        }
        else {
            var previousStateCrumb = CrumbTrailManager.getCrumbs(false).pop();
            if (previousStateCrumb) {
                StateContext.previousState = previousStateCrumb.state;
                StateContext.previousDialog = StateContext.previousState.parent;
                StateContext.previousData = previousStateCrumb.data;
            }
        }
    };
    StateController.onNavigate = function (handler) {
        if (!handler[this.NAVIGATE_HANDLER_ID]) {
            var id = this.NAVIGATE_HANDLER_ID + this.navigateHandlerId++;
            handler[this.NAVIGATE_HANDLER_ID] = id;
            this.navigateHandlers[id] = handler;
        }
    };
    StateController.offNavigate = function (handler) {
        delete this.navigateHandlers[handler[this.NAVIGATE_HANDLER_ID]];
        delete handler[this.NAVIGATE_HANDLER_ID];
    };
    StateController.navigate = function (action, toData, historyAction) {
        var url = this.getNavigationLink(action, toData);
        if (url == null)
            throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
        this._navigateLink(url, this.getNextState(action), false, historyAction);
    };
    StateController.getNavigationLink = function (action, toData) {
        return CrumbTrailManager.getHref(this.getNextState(action), toData, StateContext.data);
    };
    StateController.canNavigateBack = function (distance) {
        var canNavigate = false;
        if (distance <= this.crumbs.length && distance > 0)
            canNavigate = true;
        return canNavigate;
    };
    StateController.navigateBack = function (distance, historyAction) {
        var url = this.getNavigationBackLink(distance);
        if (url == null)
            throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
        this._navigateLink(url, this.getCrumb(distance).state, false, historyAction);
    };
    StateController.getNavigationBackLink = function (distance) {
        return this.getCrumb(distance).navigationLink;
    };
    StateController.refresh = function (toData, historyAction) {
        var url = this.getRefreshLink(toData);
        if (url == null)
            throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
        this._navigateLink(url, StateContext.state, false, historyAction);
    };
    StateController.getRefreshLink = function (toData) {
        return CrumbTrailManager.getRefreshHref(toData);
    };
    StateController.navigateLink = function (url, history, historyAction) {
        try {
            var state = settings.router.getData(url.split('?')[0]).state;
        }
        catch (e) {
            throw new Error('The Url is invalid\n' + e.message);
        }
        this._navigateLink(url, state, history, historyAction);
    };
    StateController._navigateLink = function (url, state, history, historyAction) {
        if (history === void 0) { history = false; }
        if (historyAction === void 0) { historyAction = HistoryAction.Add; }
        try {
            var oldUrl = StateContext.url;
            var queryStringData = {};
            var data = state.stateHandler.getNavigationData(state, url, queryStringData);
            data = this.parseData(data, state, queryStringData);
        }
        catch (e) {
            throw new Error('The Url is invalid\n' + e.message);
        }
        var navigateContinuation = this.getNavigateContinuation(oldUrl, state, url, historyAction);
        var unloadContinuation = function () {
            if (oldUrl === StateContext.url)
                state.navigating(data, url, navigateContinuation, history);
        };
        if (StateContext.state)
            StateContext.state.unloading(state, data, url, unloadContinuation, history);
        else
            state.navigating(data, url, navigateContinuation, history);
    };
    StateController.getNavigateContinuation = function (oldUrl, state, url, historyAction) {
        var _this = this;
        return function (asyncData) {
            if (oldUrl === StateContext.url) {
                state.stateHandler.navigateLink(StateContext.state, state, url);
                StateController.setStateContext(state, url);
                if (StateContext.oldState && StateContext.oldState !== state)
                    StateContext.oldState.dispose();
                state.navigated(StateContext.data, asyncData);
                for (var id in _this.navigateHandlers) {
                    if (url === StateContext.url)
                        _this.navigateHandlers[id](StateContext.oldState, state, StateContext.data);
                }
                if (url === StateContext.url) {
                    if (historyAction !== HistoryAction.None)
                        settings.historyManager.addHistory(state, url, historyAction === HistoryAction.Replace);
                    if (StateContext.title && (typeof document !== 'undefined'))
                        document.title = StateContext.title;
                }
            }
        };
    };
    StateController.parseData = function (data, state, queryStringData) {
        var newData = {};
        for (var key in data) {
            if (key !== settings.previousStateIdKey && key !== settings.returnDataKey
                && key !== settings.crumbTrailKey && data[key] !== state.formattedDefaults[key])
                newData[key] = ReturnDataManager.parseURLString(key, data[key], state, false, !!queryStringData[key]);
        }
        NavigationData.setDefaults(newData, state.defaults);
        return newData;
    };
    StateController.getNextState = function (action) {
        var nextState = null;
        if (StateContext.state && StateContext.state.transitions[action])
            nextState = StateContext.state.transitions[action].to;
        if (!nextState && StateInfoConfig.dialogs[action])
            nextState = StateInfoConfig.dialogs[action].initial;
        if (!nextState)
            throw new Error('The action parameter must be a Dialog key or a Transition key that is a child of the current State');
        return nextState;
    };
    StateController.getCrumb = function (distance) {
        if (distance > this.crumbs.length || distance <= 0)
            throw new Error('The distance parameter must be greater than zero and less than or equal to the number of Crumbs (' + this.crumbs.length + ')');
        return this.crumbs[this.crumbs.length - distance];
    };
    StateController.NAVIGATE_HANDLER_ID = 'navigateHandlerId';
    StateController.navigateHandlerId = 1;
    StateController.navigateHandlers = {};
    return StateController;
})();
module.exports = StateController;

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TypeConverter = require('./TypeConverter');
var StringConverter = (function (_super) {
    __extends(StringConverter, _super);
    function StringConverter(key) {
        _super.call(this, key, 'string');
    }
    StringConverter.prototype.convertFrom = function (val) {
        if (typeof val !== 'string')
            throw Error(val + ' is not a valid string');
        return val;
    };
    StringConverter.prototype.convertTo = function (val) {
        return { val: val.toString() };
    };
    return StringConverter;
})(TypeConverter);
module.exports = StringConverter;

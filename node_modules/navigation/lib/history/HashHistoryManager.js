var HistoryNavigator = require('./HistoryNavigator');
var StateContext = require('../StateContext');
var HashHistoryManager = (function () {
    function HashHistoryManager() {
        this.disabled = (typeof window === 'undefined') || !('onhashchange' in window);
        this.replaceQueryIdentifier = false;
    }
    HashHistoryManager.prototype.init = function () {
        if (!this.disabled) {
            if (window.addEventListener)
                window.addEventListener('hashchange', HistoryNavigator.navigateHistory);
            else
                window['attachEvent']('onhashchange', HistoryNavigator.navigateHistory);
        }
    };
    HashHistoryManager.prototype.addHistory = function (state, url, replace) {
        url = url != null ? url : StateContext.url;
        url = '#' + this.encode(url);
        if (!this.disabled && location.hash !== url) {
            if (!replace)
                location.hash = url;
            else
                location.replace(url);
        }
    };
    HashHistoryManager.prototype.getCurrentUrl = function () {
        return this.decode(location.hash.substring(1));
    };
    HashHistoryManager.prototype.getHref = function (url) {
        if (!url)
            throw new Error('The Url is invalid');
        return '#' + this.encode(url);
    };
    HashHistoryManager.prototype.getUrl = function (anchor) {
        return this.decode(anchor.hash.substring(1));
    };
    HashHistoryManager.prototype.encode = function (url) {
        if (!this.replaceQueryIdentifier)
            return url;
        return url.replace('?', '#');
    };
    HashHistoryManager.prototype.decode = function (hash) {
        if (!this.replaceQueryIdentifier)
            return hash;
        return hash.replace('#', '?');
    };
    return HashHistoryManager;
})();
module.exports = HashHistoryManager;
